# main_app_with_textbox.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import re
import numpy as np
import requests
from io import BytesIO

# ------------------------------ CONFIG ------------------------------
st.set_page_config(layout="wide", page_title="MCH : THIP", page_icon="üìä")
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700&display=swap');
html, body, [data-testid="stAppViewContainer"], [data-testid="stSidebar"] { font-family: 'Kanit', sans-serif; }
.kpi-title { font-size: 2rem; font-weight: 700; color: #1E3A8A; text-align: center; margin-bottom: 0.5rem; }
.kpi-n-value { font-size: 1.2rem; font-weight: 500; color: #4B5563; text-align: center; margin-bottom: 2rem; }
.interpretation-box { border: 1px solid #E5E7EB; border-radius: 12px; padding: 1.5rem; background-color: #FFFFFF; font-size: 1rem;
  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); }
.interp-item { margin-bottom: 0.8rem; display: flex; flex-wrap: wrap; line-height: 1.6; }
.interp-label { font-weight: 600; color: #4B5563; margin-right: 8px; flex-shrink: 0; }
.interp-value { font-weight: 400; color: #1F2937; }
.interp-criteria { margin-top: 1.2rem; margin-bottom: 1.2rem; }
.interp-criteria ul { list-style: none; padding-left: 0; margin-top: 0.5rem; }
.interp-criteria li { margin-bottom: 0.4rem; display: flex; align-items: center; }
.color-swatch { width: 14px; height: 14px; border-radius: 4px; margin-right: 10px; display: inline-block; border: 1px solid rgba(0,0,0,0.1); }
.interp-summary { margin-top: 1.2rem; padding: 1rem; background-color: #EFF6FF; border-left: 5px solid #3B82F6; border-radius: 4px; }
.interp-summary .interp-label { color: #1E3A8A; }
.stDataFrame th { white-space: normal !important; overflow-wrap: break-word !important; width: auto !important; }
.stDataFrame td { text-align: center !important; }
</style>
""", unsafe_allow_html=True)

# URL ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ö‡∏ô GitHub (RAW)
DEFAULT_XLSX_URL = "https://raw.githubusercontent.com/HOIARRTool/mthip/main/mthip2.xlsx"

# ------------------------------ DATA LOADING ------------------------------
def _read_excel_like(obj, header_row=3) -> pd.DataFrame:
    """‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö UploadedFile, bytes, path, URL"""
    if obj is None:
        return pd.DataFrame()
    try:
        if isinstance(obj, bytes):
            bio = BytesIO(obj)
            return pd.read_excel(bio, header=header_row)
        if hasattr(obj, "read"):  # Streamlit UploadedFile
            return pd.read_excel(obj, header=header_row)
        if isinstance(obj, str) and obj.startswith("http"):
            resp = requests.get(obj, timeout=20)
            resp.raise_for_status()
            return pd.read_excel(BytesIO(resp.content), header=header_row)
        # path local
        return pd.read_excel(obj, header=header_row)
    except Exception as e:
        st.error(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return pd.DataFrame()

@st.cache_data(show_spinner=False)
def load_kpi_data(source=None) -> pd.DataFrame:
    """
    source: UploadedFile | bytes | path | URL | None
    - ‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏≤‡∏î header ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 4 (index=3) ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    - ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô 'Unnamed: 3' ‚Üí map ‡πÄ‡∏õ‡πá‡∏ô 'kpi_name'
    """
    df = _read_excel_like(source, header_row=3)
    if df.empty:
        return pd.DataFrame()

    # ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î
    if 'Unnamed: 3' in df.columns:
        df.rename(columns={'Unnamed: 3': 'kpi_name'}, inplace=True)
    elif '‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î' in df.columns:
        df.rename(columns={'‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î': 'kpi_name'}, inplace=True)
    else:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î ('Unnamed: 3' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î')")
        return pd.DataFrame()

    # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ N ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    df_kpi = df[pd.to_numeric(df.get('N', pd.NA), errors='coerce').notna()].copy()

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    numeric_cols = ['N', 'KPI Value', 'P25', 'Median', 'P75']
    for col in numeric_cols:
        if col in df_kpi.columns:
            df_kpi[col] = pd.to_numeric(df_kpi[col], errors='coerce')

    df_kpi.dropna(subset=['kpi_name', 'KPI Value', 'P25', 'Median', 'P75'], inplace=True)
    return df_kpi

# ------------------------------ GAUGE ------------------------------
def plot_kpi_gauge(kpi_data):
    kpi_name = kpi_data['kpi_name']
    value, p25, median, p75 = kpi_data['KPI Value'], kpi_data['P25'], kpi_data['Median'], kpi_data['P75']
    n_value = int(kpi_data['N'])

    lower_is_better = any(re.search(keyword, kpi_name, re.IGNORECASE)
                          for keyword in ['‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï', '‡∏ï‡∏≤‡∏¢', '‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠', '‡πÅ‡∏ó‡∏£‡∏Å‡∏ã‡πâ‡∏≠‡∏ô', '‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤'])

    red, orange, yellow, green = '#EF4444', '#F97316', '#FBBF24', '#22C55E'
    max_val = max(value, p75) * 1.2 if max(value, p75) > 0 else 1

    steps = ([{'range': [0, p25], 'color': green}, {'range': [p25, median], 'color': yellow},
              {'range': [median, p75], 'color': orange}, {'range': [p75, max_val], 'color': red}]
             if lower_is_better else
             [{'range': [0, p25], 'color': red}, {'range': [p25, median], 'color': orange},
              {'range': [median, p75], 'color': yellow}, {'range': [p75, max_val], 'color': green}])

    if lower_is_better:
        st.info("‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ: **‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤** ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤")
    else:
        st.info("‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ: **‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤** ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤")

    fig = go.Figure(go.Indicator(
        mode="gauge+number", value=value,
        number={'valueformat': '.2f', 'font': {'size': 50}},
        title={'text': "KPI Value", 'font': {'size': 24}},
        gauge={
            'axis': {'range': [0, max_val]},
            'bar': {'color': "#1E3A8A", 'thickness': 0.3},
            'bgcolor': "white",
            'borderwidth': 2,
            'bordercolor': "#D1D5DB",
            'steps': steps
        }
    ))

    # ‡πÅ‡∏™‡∏î‡∏á P25 / Median / P75 ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    annotation_text = f"<b>P25:</b> {p25:.2f}<br><b>Median:</b> {median:.2f}<br><b>P75:</b> {p75:.2f}"
    fig.add_annotation(x=0.05, y=0.95, xref="paper", yref="paper", text=annotation_text, showarrow=False,
                       font=dict(family="Kanit, sans-serif", size=12, color="#1F2937"),
                       align="left", bordercolor="#E5E7EB", borderwidth=1, borderpad=4,
                       bgcolor="#F9FAFB", opacity=0.9)

    fig.update_layout(height=400, margin=dict(t=50, r=50, b=50, l=50))

    st.markdown(f'<p class="kpi-title">{kpi_name}</p>', unsafe_allow_html=True)
    st.markdown(f'<p class="kpi-n-value">N = {n_value:,}</p>', unsafe_allow_html=True)
    st.plotly_chart(fig, use_container_width=True)

def interpret_kpi_data(kpi_data):
    kpi_name, value, p25, median, p75 = (kpi_data['kpi_name'], kpi_data['KPI Value'],
                                         kpi_data['P25'], kpi_data['Median'], kpi_data['P75'])
    unit = " ‡∏ô‡∏≤‡∏ó‡∏µ" if "‡∏ô‡∏≤‡∏ó‡∏µ" in kpi_name else ("%" if "‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞" in kpi_name or "%" in kpi_name else "")
    lower_is_better = any(re.search(keyword, kpi_name, re.IGNORECASE)
                          for keyword in ['‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï', '‡∏ï‡∏≤‡∏¢', '‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠', '‡πÅ‡∏ó‡∏£‡∏Å‡∏ã‡πâ‡∏≠‡∏ô', '‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤'])
    levels = [{'range': (0, p25), 'label': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 1'},
              {'range': (p25, median), 'label': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 2'},
              {'range': (median, p75), 'label': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 3'},
              {'range': (p75, np.inf), 'label': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 4'}]
    level_colors = (['‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', '‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á', '‡∏™‡πâ‡∏°', '‡πÅ‡∏î‡∏á'] if lower_is_better else ['‡πÅ‡∏î‡∏á', '‡∏™‡πâ‡∏°', '‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á', '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß'])
    for i, level in enumerate(levels):
        level['color'] = level_colors[i]

    interpretation = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏î‡πâ"
    for level in levels:
        if level['range'][0] <= value < level['range'][1]:
            interpretation = f"‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ <strong>{value:,.2f}{unit}</strong> ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á <strong>{level['label']} ({level['color']})</strong>"
            break
    if value >= p75:
        interpretation = f"‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ <strong>{value:,.2f}{unit}</strong> ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á <strong>{levels[-1]['label']} ({levels[-1]['color']})</strong>"

    color_map_hex = {'‡πÅ‡∏î‡∏á': '#EF4444', '‡∏™‡πâ‡∏°': '#F97316', '‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á': '#FBBF24', '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß': '#22C55E'}
    criteria_html = "<ul>"
    for level in levels:
        min_r, max_r = level['range']
        range_str = f"{min_r:,.2f} - {max_r:,.2f}{unit}" if max_r != np.inf else f"‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ {min_r:,.2f}{unit}"
        color_hex = color_map_hex.get(level['color'], '#D1D5DB')
        criteria_html += f'<li><span class="color-swatch" style="background-color: {color_hex};"></span><strong>{level["label"]} ({level["color"]}):</strong>&nbsp;{range_str}</li>'
    criteria_html += "</ul>"

    output = f"""
    <div class="interpretation-box">
        <div class="interp-item"><div class="interp-label">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å:</div><div class="interp-value">{kpi_name}</div></div>
        <div class="interp-item"><div class="interp-label">‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</div><div class="interp-value">‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2567 ‡∏ñ‡∏∂‡∏á ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2568 (‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå)</div></div>
        <div class="interp-item"><div class="interp-label">‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ:</div>
            <div class="interp-value" style="font-size: 1.1rem; font-weight: 700; color: #1E3A8A;">{value:,.2f}{unit}</div>
        </div>
        <div class="interp-criteria"><div class="interp-label">‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå:</div>{criteria_html}</div>
        <div class="interp-summary"><div class="interp-label">‡∏™‡∏£‡∏∏‡∏õ/‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°:</div><div class="interp-value">{interpretation}</div></div>
    </div>"""
    return output

# ------------------------------ UI ------------------------------
st.title("MCH : THIP")
st.markdown("‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI (.xlsx) ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

with st.sidebar:
    st.header("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå XLSX (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)", type=['xlsx'])

# ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å GitHub ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
data_source = None
using_sample = False
if uploaded_file is not None:
    data_source = uploaded_file
else:
    data_source = DEFAULT_XLSX_URL
    using_sample = True

df_kpi = load_kpi_data(data_source)

if not df_kpi.empty:
    if using_sample:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‚Üí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å GitHub (mthip2.xlsx)**")

    st.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î {len(df_kpi)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    kpi_list = df_kpi['kpi_name'].unique().tolist()
    selected_kpi_name = st.selectbox("**‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π:**", options=kpi_list)
    st.markdown("---")

    if selected_kpi_name:
        selected_kpi_data = df_kpi[df_kpi['kpi_name'] == selected_kpi_name].iloc[0]
        col1, col2 = st.columns([3, 2])
        with col1:
            plot_kpi_gauge(selected_kpi_data)
        with col2:
            st.subheader("‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• üìù")
            interpretation_result = interpret_kpi_data(selected_kpi_data)
            st.markdown(interpretation_result, unsafe_allow_html=True)
else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå")
